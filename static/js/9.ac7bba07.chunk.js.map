{"version":3,"sources":["p1/component/QuoteComponent.js","p1/app.js"],"names":["QuoteComponent","handleNewQuote","CurrentQuote","AccentColor","quote","author","className","style","backgroundColor","id","Button","href","icon","faTwitter","type","onClick","arrColor","RandomQoute","quotes","state","randomColor","GenerateRandomQuote","setState","color","bodyQuotes","bind","isLoaded","fetch","then","res","json","setTimeout","this","fontSize","marginBottom","fontWeight","React","Component","arr","random","Math","floor","length","console","log"],"mappings":"yOAkCeA,EA3BO,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAE3CC,EAAmBF,EAAnBE,MAAQC,EAAWH,EAAXG,OAEf,OACI,qBAAKC,UAAW,OAAQC,MAAO,CAACC,gBAAgB,GAAD,OAAIL,IAAnD,SAEA,qBAAKM,GAAG,YAAYH,UAAW,YAA/B,SACA,sBAAMA,UAAW,OAAjB,UACQ,mBAAGG,GAAG,OAAOH,UAAW,mBAAxB,SACHF,IAGG,sBAAME,UAAW,mBAAoBG,GAAG,SAAxC,SAAmDJ,IACnD,eAACK,EAAA,EAAD,CAAQD,GAAG,cAAeH,UAAW,WAC7BK,KAAI,gDAA2CP,EAA3C,YAAoDC,EAApD,mBADZ,UAEC,cAAC,IAAD,CAAiBO,KAAMC,MAFxB,aAIH,wBAAQJ,GAAG,YAAYH,UAAW,cAAeQ,KAAK,SAASC,QAAS,kBAAId,KAA5E,+BChBTe,EAAU,CAAC,UAAU,UAAW,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAEpGC,E,kDAEF,aAAc,IAAD,8BACT,gBAyBJhB,eAAgB,WAEZ,IAAMiB,EAAS,EAAKC,MAAdD,OACGE,EAAcC,EAAoBL,GACpBK,EAAoBH,GACvC,EAAKI,SAAS,CAACC,MAAMH,EAAYI,WAAWH,EAAoBH,MA7BnE,EAAKjB,eAAiB,EAAKA,eAAewB,KAApB,gBAEvB,EAAKN,MAAM,CACXD,OAAO,GACPM,WAAW,GACXD,MAAM,UACNG,UAAS,GARA,E,qDAab,WAAoB,IAAD,OAChBC,MApBO,0IAoBSC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChCF,MAAK,SAAAC,GAEFE,YAAW,WAAM,EAAKT,SAAS,CAC3BI,UAAS,EACTR,OAAOW,EAAIX,QAEX,EAAKjB,qBAET,O,oBAaN,WAEI,MAAsC+B,KAAKb,MAApCO,EAAP,EAAOA,SAAUH,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WACxB,OAAIE,EAIE,8BACI,cAAC,EAAD,CAAgBxB,aAAcsB,EAAYvB,eAAgB+B,KAAK/B,eAAgBE,YAAaoB,MAJ1F,qBAAKhB,MAAO,CAAC0B,SAAS,OAAQC,aAAa,OAAOC,WAAW,KAA7D,4B,GA1CMC,IAAMC,WA0DhC,SAAShB,EAAoBiB,GACrB,IAAIC,EAASC,KAAKC,MAAMD,KAAKD,SAAWD,EAAII,QAG5C,OADAC,QAAQC,IAAIN,EAAIC,IACTD,EAAIC,GAUFtB,a","file":"static/js/9.ac7bba07.chunk.js","sourcesContent":["// style + structure component\r\nimport '../../style/p1/Qute.scss';\r\nimport React from 'react'\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst QuoteComponent =({handleNewQuote, CurrentQuote, AccentColor}) => {\r\n\r\n    const {quote,  author} =  CurrentQuote\r\n\r\n    return (\r\n        <div className={'body'} style={{backgroundColor:`${AccentColor}`}}  >\r\n\r\n        <div id=\"quote-box\" className={'Quote-sec'}>\r\n        <div  className={'page'} > \r\n                <p id=\"text\" className={'Quote-sec__quote'}>\r\n            {quote}\r\n                \r\n                </p>\r\n                <span className={'Quote-sec__owner'} id=\"author\" >{author}</span>\r\n                <Button id=\"tweet-quote\"  className={'btn dark'}\r\n                        href={`https://twitter.com/intent/tweet?text=${quote}-${author}&hashtags=quote`}\r\n                ><FontAwesomeIcon icon={faTwitter} />\r\n            twitter</Button>\r\n             <button id=\"new-quote\" className={'btn b-hover'} type='button' onClick={()=>handleNewQuote()} //func\r\n                >New Quote</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n          \r\n    )\r\n}\r\n\r\nexport default QuoteComponent","\r\nimport React from \"react\"\r\n//import ''\r\nimport QuoteComponent from './component/QuoteComponent'\r\n\r\n\r\n\r\nlet quoteurl =\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n\r\nlet arrColor =['#1abc9c','#3498db', '#f1c40f','#ecf0f1','#2c3e50','#7f8c8d','#273c75','#353b48','#487eb0','#485460']\r\n\r\nclass RandomQoute extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n         this.handleNewQuote = this.handleNewQuote.bind(this);\r\n\r\n        this.state={\r\n        quotes:[], // load quotes insided arr\r\n        bodyQuotes:'',  // a state that hold quotes , and update later \r\n        color:'#3498db',\r\n        isLoaded:false,\r\n      }\r\n     \r\n    }\r\n     \r\n    componentDidMount(){\r\n       fetch(quoteurl).then(res => res.json())\r\n      .then(res => \r\n        {\r\n          setTimeout(()=>{ this.setState({\r\n              isLoaded:true,\r\n              quotes:res.quotes,\r\n          \r\n            },this.handleNewQuote)}) // genereate current quote})\r\n    \r\n        },4000)\r\n       \r\n    }\r\n    handleNewQuote =()=>{\r\n      \r\n        var  {quotes}= this.state\r\n           const randomColor = GenerateRandomQuote(arrColor);\r\n            const randomQuote =GenerateRandomQuote(quotes);  // var hold func genereate new quote\r\n            this.setState({color:randomColor,bodyQuotes:GenerateRandomQuote(quotes)}) \r\n    }\r\n     \r\n // didin't do any thing for genrateting random Q whe /**[sloved]\r\n // the probplem the data only  fetch when i click the random btn , not when page load /*[sloved] */\r\n    render(){\r\n  \r\n        const {isLoaded ,color, bodyQuotes} = this.state;\r\n        if(!isLoaded){\r\n            return  <div style={{fontSize:'40px', marginBottom:'-50%',fontWeight:700}}>loading...</div>\r\n        }else{\r\n          return (\r\n              <div>\r\n                  <QuoteComponent CurrentQuote={bodyQuotes} handleNewQuote={this.handleNewQuote} AccentColor={color}/>\r\n              </div>\r\n            )\r\n        }      \r\n       \r\n    }\r\n\r\n    \r\n    \r\n}\r\n\r\n\r\nfunction GenerateRandomQuote(arr) {\r\n        let random = Math.floor(Math.random() * arr.length ) /// gereate random quote () based on quotes in array \r\n\r\n        console.log(arr[random])\r\n        return arr[random]\r\n};\r\n\r\n\r\nfunction Loaded(props) {\r\n  setTimeout((props)=>{\r\n    return <div>{props.load}</div>\r\n  },2000)\r\n  \r\n}\r\nexport  default  RandomQoute"],"sourceRoot":""}